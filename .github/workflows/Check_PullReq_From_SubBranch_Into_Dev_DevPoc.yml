name: Check deploy package

# Controls when the action will run. 
on:
  # Triggers the workflow on pull request event but only for the master branch
  pull_request:
    branches: [ dev ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Get the salesforce command line tool, extract it untar it and then install it
      - name: 'Install CLI and Login to Org'
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
          ./sfdx-cli/install

      # Run the open ssl tool, decrypt the encrypted key and output a server key
      - name: 'Decrypt file'
        run: openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out server.key -base64 -K ${{secrets.DECRYPTION_KEY}} -iv ${{secrets.DECRYPTION_IV}}
          
      # Authorize ouserlves, the server key was decrypted by the previous step
      - name: 'Authorize'
        run: sfdx force:auth:jwt:grant --clientid=${{secrets.CONSUMER_KEY}} --username=${{secrets.USERNAME}} --jwtkeyfile server.key --setdefaultdevhubusername --setalias=OW_DevPoc -r https://test.salesforce.com

          
      - name: Branches Involved
        env:
          SOURCE_BRANCH: ${{ toJSON(github.head_ref) }}
          TARGET_BRANCH: ${{ toJSON(github.base_ref) }}
          USER: ${{ toJSON(github.actor) }}
        run: |
          echo "$SOURCE_BRANCH"
          echo "$TARGET_BRANCH"
          echo "$USER"
        
      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 0
          format: 'DD-MM-YYYY  HH-mm-ss'
      - name: Usage
        env:
          TIME: "${{ steps.time.outputs.time }}"
        run: |
          echo $TIME 
            
      # sudo npm install sfdx-git-delta@latest -g  
      - name: Install App and Create Delta
        run: |
          sudo npm install sfdx-git-delta@latest -g
          git fetch --all
          git --no-pager diff --name-status $SOURCE_BRANCH origin/dev
          mkdir changed-sources
          sgd --to $SOURCE_BRANCH --from origin/dev --repo . --output changed-sources/ --generate-delta
          cat changed-sources/package/package.xml

      - uses: sfdx-actions/setup-pmd@v1
      - name: run-pmd
        run: pmd -d ./changed-sources/force-app/main/default/classes -R ./force-app/main/default/classes/pmd_rules.xml -f text    
          
      - uses: actions/upload-artifact@v2
        with:
          name: AH package check uploaded from ${{ github.head_ref }} to ${{ github.base_ref }} by ${{ github.actor }} ${{ steps.time.outputs.time }}
          path: changed-sources/    
          
      - name: Convert Metadata
        run: sfdx force:source:convert --manifest=changed-sources/package/package.xml --outputdir=convert

      # run: sfdx force:mdapi:deploy --deploydir=convert --checkonly -u ${{secrets.USERNAME}} -w30 
      # run: sfdx force:mdapi:deploy --deploydir=convert --checkonly -u ${{secrets.USERNAME}} --testlevel RunSpecifiedTests --runtests CreateOppTest.cls -w30 
      - name: Run Tests and Deploy
         run: sfdx force:mdapi:deploy --deploydir=convert --checkonly -u ${{secrets.USERNAME}} --testlevel=RunSpecifiedTests --runtests=CreateOppTest.cls -w30
